from telegram.ext import ApplicationBuilder

app = ApplicationBuilder().token(BOT_TOKEN).build()


import os

VIN, BRAND, MODEL, YEAR, COMMENT, EXTRA = range(6)

YOUR_TELEGRAM_ID = 6118019853
BOT_TOKEN = "7904294665:AAHC7eSR5M6MdZVFiICNui0BP8t7JkssELg"  

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ–ú–∞—Ä–∫–µ—Ç!\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–ø–∏—à–∏ /start"
    )

# –°—Ç–∞—Ä—Ç –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ VIN (17 —Å–∏–º–≤–æ–ª–æ–≤):")
    return VIN

async def vin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vin_text = update.message.text.strip()
    if len(vin_text) != 17:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π VIN. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ (17 —Å–∏–º–≤–æ–ª–æ–≤):")
        return VIN
    context.user_data['vin'] = vin_text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ:")
    return BRAND

async def brand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    brand = update.message.text.strip()
    if not brand.isalpha():
        await update.message.reply_text("–ú–∞—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return BRAND
    context.user_data['brand'] = brand
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ:")
    return MODEL

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    model = update.message.text.strip()
    if not model.isalnum():
        await update.message.reply_text("–ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return MODEL
    context.user_data['model'] = model
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2015):")
    return YEAR

async def year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    year_text = update.message.text.strip()
    if not year_text.isdigit() or not (1980 <= int(year_text) <= 2025):
        await update.message.reply_text("–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1980 –¥–æ 2025. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
        return YEAR
    context.user_data['year'] = year_text
    await update.message.reply_text("–ö–∞–∫–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏–ª–∏ —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏?")
    return COMMENT

async def comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['comment'] = update.message.text.strip()
    await update.message.reply_text("–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –î–û–ë–ê–í–ò–¢–¨ –∫ –∑–∞–∫–∞–∑—É? –ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /skip")
    return EXTRA

async def extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    extra_text = update.message.text.strip()
    context.user_data['extra'] = extra_text
    return await finish_order(update, context)

async def skip_extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['extra'] = "‚Äî"
    return await finish_order(update, context)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = f"user_photo_{update.message.from_user.id}.jpg"
    await file.download_to_drive(file_path)
    context.user_data['photo'] = file_path
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–∫–∞–∑—É.")

async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data

    msg = (
        f"üßæ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
        f"VIN: {data['vin']}\n"
        f"–ú–∞—Ä–∫–∞: {data['brand']}\n"
        f"–ú–æ–¥–µ–ª—å: {data['model']}\n"
        f"–ì–æ–¥: {data['year']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {data.get('extra', '-')}"
    )

    await context.bot.send_message(chat_id=YOUR_TELEGRAM_ID, text=msg)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'photo' in data:
        with open(data['photo'], 'rb') as f:
            await context.bot.send_photo(chat_id=YOUR_TELEGRAM_ID, photo=InputFile(f))
        os.remove(data['photo'])

    await update.message.reply_text(
        "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π ‚Äî –Ω–∞–∂–º–∏ /start"
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            VIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, vin)],
            BRAND: [MessageHandler(filters.TEXT & ~filters.COMMAND, brand)],
            MODEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, model)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, year)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment)],
            EXTRA: [
                CommandHandler("skip", skip_extra),
                MessageHandler(filters.TEXT & ~filters.COMMAND, extra),
                MessageHandler(filters.PHOTO, handle_photo),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, welcome))
    app.run_polling()

